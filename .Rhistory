data_mp <- JOIN_TRIM_MAPTAB(data)
data_cml <- dkb_file %>%
#IMPORT(., skip_n = 0) %>%
#  FORMAT() %>%
DATA_CUMULATIVE()
dkb_bar(data_mp,"label1")
dkb_bar(data_mp,"label2")
dkb_bar(data_mp,"recipient_clean")
dkb_bar(data_mp,"recipient")
dkb_net(data_mp,"month")
dkb_net(data_mp,"year")
dkb_net(data_mp,"date")
dkb_cmlsum(dkb_cml)
dkb_cmlsum(data_cml)
runApp('dkb_analysis/dkb_w.R')
tf_choices <- c("month", "year","date")
runApp('dkb_analysis/dkb_w.R')
# Run the application
shinyApp(ui, server)
library("shiny")
library("shinydashboard")
library("shinyWidgets")
tf_choices <- c("month", "year","date")
ui <- {
dashboardPage(
dashboardHeader(title = "DKB Analyzer"),
dashboardSidebar(disable = T),
dashboardBody(tabsetPanel(tabPanel(fluidPage(
fluidRow(
box(
title = "Upload your Banking Statements",
solidHeader = T,
status = "primary",
width = 10,
"This is the start. Upload your DKB banking statements.",
fileInput(inputId = "upload", label = NULL,
multiple = F,width = "50%")
),
p()
),
fluidRow(
box(
title = "Upload your Mapping Table",
solidHeader = T,
status = "primary",
width = 10,
"After you edited the mapping table, upload it here.",
fileInput(inputId = "upload_maptab", label = NULL,
multiple = F,width = "50%")
)
),
fluidRow(
box(
title = "Choose columns",
solidHeader = T,
status = "success",
width = 10,
"Select the timeframe for your report.",
p(),
selectInput(inputId = "column", tf_choices,label = NULL,multiple = F,)
)
)
))))
)
}
server <- function(input, output){
}
# Run the application
shinyApp(ui, server)
print(source('dkb_analysis/dkb_w.R')$value)
print(source('dkb_analysis/dkb_w.R')$value)
runApp('dkb_analysis/dkb_w.R')
runApp('dkb_analysis/dkb_w.R')
library(shiny); runApp('dkb_analysis/dkb_w.R')
dashboardPage(
dashboardHeader(title = "DKB Analyzer"),
dashboardSidebar(disable = T),
dashboardBody(fluidPage(
column(
width = 4,
fluidRow(
box(
title = "Upload your Banking Statements",
solidHeader = T,
status = "primary",
width = 10,
"This is the start. Upload your DKB banking statements.",
p(),
fileInput(
inputId = "upload",
label = NULL,
multiple = F,
width = "50%"
),
hr(),
"Placeholder text for downloading and customizing map tab.",
checkboxInput(inputId = "maptab_b",
label = "Use Mapping table?",
FALSE,
)
)
),
p(),
fluidRow(
id = "maptab_cont",
box(
title = "Upload your Mapping Table",
solidHeader = T,
status = "primary",
width = 10,
"After you edited the mapping table, upload it here.",
p(),
fileInput(
inputId = "upload_maptab",
label = NULL,
multiple = F,
width = "50%"
)
)
),
fluidRow(
box(
title = "Choose columns",
solidHeader = T,
status = "primary",
width = 10,
"Select the timeframe for your report.",
p(),
selectInput(
inputId = "tf",
tf_choices,
label = NULL,
multiple = F,
),
"Select the custom column.",
p(),
selectInput(
inputId = "column",
col_choices,
label = NULL,
multiple = F,
),
actionButton(
inputId = "go",
label = "Go!",
width = "20%"
)
)
),
),
column(
width = 8,
tabsetPanel(
type = "pills",
tabItem(
tabName = "Net view by time",
box(
solidHeader = T,
status = "primary",
width = 10,
plotOutput("dkb_net", )
),
),
tabItem(
tabName = "Ordered Bar Char",
box(
solidHeader = T,
status = "primary",
width = 10,
plotOutput("dkb_bar")
),
),
tabItem(
tabName = "Grid View",
box(
solidHeader = T,
status = "primary",
width = 10,
plotOutput("dkb_grid")
)
)
)
)
))
)
source("dkb_analysis/mm3.R")
LOAD_PACKAGES()
dkb_file <- GET_FILE()
data <- dkb_file %>%
IMPORT(.,skip_n = 5) %>%
FORMAT()
#CREATE_MAPTAB(data)
data_mp <- JOIN_TRIM_MAPTAB(data)
data_cml <- dkb_file %>%
#IMPORT(., skip_n = 0) %>%
#  FORMAT() %>%
DATA_CUMULATIVE()
col_choices <- c("label1", "label2", "label3", "recipient", "recipient_clean")
svDialogs::dlg_list(col_choices,multiple = F,)
library("shiny")
library("shinydashboard")
library("shinyWidgets")
library("shinyjs")
library("DT")
tf_choices <- c("month", "year","date")
col_choices <- c("label1", "label2", "label3", "recipient", "recipient_clean")
source("~/code/dkb_analysis/mm3.R")
LOAD_PACKAGES()
ui <- {
dashboardPage(
dashboardHeader(title = "DKB Analyzer"),
dashboardSidebar(disable = T),
dashboardBody(fluidPage(
column(
width = 4,
fluidRow(
box(
title = "Upload your Banking Statements",
solidHeader = T,
status = "primary",
width = 10,
"This is the start. Upload your DKB banking statements.",
p(),
fileInput(
inputId = "upload",
label = NULL,
multiple = F,
width = "50%"
),
hr(),
"Placeholder text for downloading and customizing map tab.",
checkboxInput(inputId = "maptab_b",
label = "Use Mapping table?",
FALSE,
)
)
),
p(),
fluidRow(
id = "maptab_cont",
box(
title = "Upload your Mapping Table",
solidHeader = T,
status = "primary",
width = 10,
"After you edited the mapping table, upload it here.",
p(),
fileInput(
inputId = "upload_maptab",
label = NULL,
multiple = F,
width = "50%"
)
)
),
fluidRow(
box(
title = "Choose columns",
solidHeader = T,
status = "primary",
width = 10,
"Select the timeframe for your report.",
p(),
selectInput(
inputId = "tf",
tf_choices,
label = NULL,
multiple = F,
),
"Select the custom column.",
p(),
selectInput(
inputId = "column",
col_choices,
label = NULL,
multiple = F,
),
actionButton(
inputId = "go",
label = "Go!",
width = "20%"
)
)
),
),
column(
width = 8,
tabsetPanel(
type = "pills",
tabItem(
tabName = "Net view by time",
box(
solidHeader = T,
status = "primary",
width = 10,
plotOutput("dkb_net", )
),
),
tabItem(
tabName = "Ordered Bar Char",
box(
solidHeader = T,
status = "primary",
width = 10,
plotOutput("dkb_bar")
),
),
tabItem(
tabName = "Grid View",
box(
solidHeader = T,
status = "primary",
width = 10,
plotOutput("dkb_grid")
)
)
)
)
))
)
}
server <- function(input, output){
observeEvent(input$maptab_b, {
shinyjs::toggle("maptab_cont",anim = T,animType = "fade",time = .2)
})
observeEvent(input$go,{
req(input$upload, input$upload_maptab)
file <- input$upload
dkb_file <- file$datapath
data <- dkb_file %>%
IMPORT(.,skip_n = 5) %>%
FORMAT()
maptab <- input$upload_maptab
maptab <- maptab$datapath
data_mp <- JOIN_TRIM_MAPTAB(maptab, data)
output$dkb_net <- renderPlot(dkb_net(data_mp,input$tf))
output$dkb_bar <- renderPlot(dkb_bar(data_mp,input$column))
output$dkb_grid <- renderPlot(dkb_grid(data_mp,input$tf,input$column))
})
}
# Run the application
shinyApp(ui, server)
library("shiny")
library("shinydashboard")
library("shinyWidgets")
library("shinyjs")
library("DT")
tf_choices <- c("month", "year","date")
col_choices <- c("label1", "label2", "label3", "recipient", "recipient_clean")
source("~/code/dkb_analysis/mm3.R")
LOAD_PACKAGES()
ui <- {
dashboardPage(
dashboardHeader(disable = T),
dashboardSidebar(disable = T),
dashboardBody(fluidPage(
column(
width = 4,
fluidRow(
box(
title = "Upload your Banking Statements",
solidHeader = T,
status = "primary",
width = 10,
"This is the start. Upload your DKB banking statements.",
p(),
fileInput(
inputId = "upload",
label = NULL,
multiple = F,
width = "50%"
),
hr(),
"Placeholder text for downloading and customizing map tab.",
checkboxInput(inputId = "maptab_b",
label = "Use Mapping table?",
FALSE,
)
)
),
p(),
fluidRow(
id = "maptab_cont",
box(
title = "Upload your Mapping Table",
solidHeader = T,
status = "primary",
width = 10,
"After you edited the mapping table, upload it here.",
p(),
fileInput(
inputId = "upload_maptab",
label = NULL,
multiple = F,
width = "50%"
)
)
),
fluidRow(
box(
title = "Choose columns",
solidHeader = T,
status = "primary",
width = 10,
"Select the timeframe for your report.",
p(),
selectInput(
inputId = "tf",
tf_choices,
label = NULL,
multiple = F,
),
"Select the custom column.",
p(),
selectInput(
inputId = "column",
col_choices,
label = NULL,
multiple = F,
),
actionButton(
inputId = "go",
label = "Go!",
width = "20%"
)
)
),
),
column(
width = 8,
tabsetPanel(
type = "pills",
tabItem(
tabName = "Net view by time",
box(
solidHeader = T,
status = "primary",
width = 10,
plotOutput("dkb_net", )
),
),
tabItem(
tabName = "Ordered Bar Char",
box(
solidHeader = T,
status = "primary",
width = 10,
plotOutput("dkb_bar")
),
),
tabItem(
tabName = "Grid View",
box(
solidHeader = T,
status = "primary",
width = 10,
plotOutput("dkb_grid")
)
)
)
)
))
)
}
server <- function(input, output){
observeEvent(input$maptab_b, {
shinyjs::toggle("maptab_cont",anim = T,animType = "fade",time = .2)
})
observeEvent(input$go,{
req(input$upload, input$upload_maptab)
file <- input$upload
dkb_file <- file$datapath
data <- dkb_file %>%
IMPORT(.,skip_n = 5) %>%
FORMAT()
maptab <- input$upload_maptab
maptab <- maptab$datapath
data_mp <- JOIN_TRIM_MAPTAB(maptab, data)
output$dkb_net <- renderPlot(dkb_net(data_mp,input$tf))
output$dkb_bar <- renderPlot(dkb_bar(data_mp,input$column))
output$dkb_grid <- renderPlot(dkb_grid(data_mp,input$tf,input$column))
})
}
# Run the application
shinyApp(ui, server)
library(shiny); runApp('dkb_analysis/dkb_w.R')
source('~/code/dkb_analysis/mm3.R')
runApp('dkb_analysis/dkb_w.R')
runApp('dkb_w.R')
runApp('dkb_analysis/dkb_w.R')
runApp('dkb_w.R')
runApp('dkb_analysis/dkb_w.R')
runApp('dkb_w.R')
runApp('dkb_analysis/dkb_w.R')
?downloadhandler
runApp('dkb_analysis/dkb_w.R')
runApp('dkb_analysis/dkb_w.R')
runApp('dkb_analysis/dkb_w.R')
runApp('dkb_analysis/dkb_w.R')
today()
today()%m-%12
today()%m-12%
1
2
today()%-m%12
today()%-m%months(12)
today()%-m% months(12)
today() %-m% months(12)
library("lubridate")
today() %-m% months(12)
today() %m-% months(12)
runApp('dkb_analysis/dkb_w.R')
